" Credits: https://github.com/tpope/dotfiles/blob/master/.vimrc

" Section: Bootstrap


if v:version < 600 | finish | endif

" Useful for when this configuration is in non-standard locations.
if empty($MYVIMRC) | let $MYVIMRC = expand('<sfile>:p') | endif

if !get(v:, 'vim_did_enter', !has('vim_starting'))
  if empty($CODE_HOME)
    let $CODE_HOME = expand('$HOME/src')
  endif
  if empty($XDG_CONFIG_HOME)
    let $XDG_CONFIG_HOME = expand('$HOME/.config')
  endif
  if empty($XDG_DATA_HOME)
    let $XDG_DATA_HOME = expand('$HOME/.local/share')
  endif
  if empty($XDG_CACHE_HOME)
    let $XDG_CACHE_HOME = expand('$HOME/.cache')
  endif
  if empty($XDG_STATE_HOME)
    let $XDG_STATE_HOME = expand('$HOME/.local/state')
  endif
  filetype off
  set runtimepath^=$XDG_CONFIG_HOME/vim
  set runtimepath+=$XDG_CONFIG_HOME/vim/after
  let g:netrw_home = $XDG_DATA_HOME . "/vim"
  if has('packages')
    let &packpath = &runtimepath
  else
    let s:rtp = []
    for s:dir in split(&runtimepath, ',')
      if $VIMRUNTIME ==# s:dir
        call add(s:rtp, s:dir)
      elseif s:dir =~# 'after$'
        call extend(s:rtp, [s:dir[0:-6] . 'pack/*/start/*/after', s:dir])
      else
        call extend(s:rtp, [s:dir, s:dir . '/pack/*/start/*'])
      endif
    endfor
    let &runtimepath = join(s:rtp, ',')
    unlet! s:rtp s:dir
  endif
endif

if $VIM_BARE
  setglobal noloadplugins
  finish
endif

setglobal nocompatible
setglobal pastetoggle=<F2>

" Fix Vim on XTerm to avoid raw-terminal-mode
let &t_TI=""
let &t_TE=""

filetype plugin indent on
" vint: -ProhibitAutocmdWithNoGroup
exe 'augroup my'
autocmd!


" Section: Moving around, searching, patterns, and tags

setglobal startofline
setglobal shortmess-=S
setglobal cpoptions+=J
if has('vim_starting')
  setglobal noignorecase
endif
setglobal smartcase
setglobal incsearch
setglobal hlsearch
setglobal tags=./tags;
setglobal include=
setglobal path=.,,

autocmd FileType c,cpp           setlocal path+=/usr/include include&
autocmd FileType sh,zsh,csh,tcsh
      \ setlocal include=^\\s*\\%(\\.\\\|source\\)\\s |
      \ let &l:path = $PATH . ',.'
autocmd FileType lua
      \ if expand('%:p') =~# '/awesome/' |
      \   let &l:path = expand('~/.config/awesome') . ',/etc/xdg/awesome,/usr/share/awesome/lib,' . &l:path |
      \ endif
autocmd FileType ruby setlocal tags-=./tags;


" Section: Displaying text

if has('vim_starting') && exists('+breakindent')
  setglobal breakindent showbreak=\ +
endif
setglobal modelineexpr
setglobal display=lastline
setglobal scrolloff=1
setglobal sidescrolloff=5
setglobal lazyredraw
if (&termencoding ==# 'utf-8' || &encoding ==# 'utf-8') && v:version >= 700
  let &g:listchars = "tab:\u21e5\u00b7,trail:\u2423,extends:\u21c9,precedes:\u21c7,nbsp:\u00b7"
  let &g:fillchars = "vert:\u250b,fold:\u00b7"
else
  setglobal listchars=tab:>\ ,trail:-,extends:>,precedes:<
endif


" Section: Windows

setglobal laststatus=2
setglobal showtabline=2

if empty(&g:statusline)
  setglobal statusline=[%n]\ %<%.99f
  setglobal statusline+=\ %y%h%w%m%r
  if exists('*FugitiveStatusline')
    setglobal statusline+=%{FugitiveStatusline()}
  endif
  setglobal statusline+=%=%-14.(%l,%c%V%)
  setglobal statusline+=\ %P
endif

setglobal titlestring=%{v:progname}\ %{tolower(empty(v:servername)?'':'--servername\ '.v:servername.'\ ')}%{fnamemodify(getcwd(),':~')}%{exists('$SSH_TTY')?'\ <'.hostname().'>':''}
setglobal iconstring=%{tolower(empty(v:servername)?v:progname\ :\ v:servername)}%{exists('$SSH_TTY')?'@'.hostname():''}

if has('vim_starting')
  setglobal nohidden
endif

autocmd SourcePre */macros/less.vim setglobal laststatus=0 showtabline=0


" Section: GUI

setglobal printoptions=paper:letter
setglobal mousemodel=popup
if $TERM =~# '^screen'
  if exists('+ttymouse') && &ttymouse ==# ''
    setglobal ttymouse=sgr
  endif
endif

if !has('gui_running') && empty($DISPLAY) || !has('gui')
  " Mouse in insert mode puts some weird characters to the file.
  setglobal mouse=nv
else
  setglobal mouse=nvi
endif
if exists('+macmeta')
  setglobal macmeta
endif
setglobal winaltkeys=no

function! s:font()
  if has('mac')
    return 'Monaco:h14'
  else
    return 'Monospace 14'
  endif
endfunction

autocmd VimEnter * if !has('gui_running') | set noicon background=dark | endif
autocmd GUIEnter * set background=light icon guioptions-=T guioptions-=m guioptions-=e guioptions-=r guioptions-=L
autocmd GUIEnter * silent! colorscheme vividchalk
autocmd GUIEnter * let &g:guifont = substitute(&g:guifont, '^$', s:font(), '')
autocmd FocusLost * let s:confirm = &confirm | setglobal noconfirm | silent! wall | let &confirm = s:confirm


" Section: Messages and info

setglobal confirm
setglobal showcmd
setglobal belloff=all


" Section: Editing text and indent

setglobal backspace=2
setglobal complete-=i     " Searching includes can be slow
setglobal completeopt=menuone,noselect
setglobal formatoptions=
if v:version + has('patch541') >= 704
  setglobal formatoptions+=j
endif
setglobal dictionary+=/usr/share/dict/words
setglobal infercase
setglobal showmatch
setglobal virtualedit=block

setglobal shiftround
setglobal smarttab
if has('vim_starting')
  let mapleader="\\"
  set autoindent
  set smartindent
  set smarttab
  set expandtab
  set splitbelow splitright
  set tabstop=8 softtabstop=0
  if exists('*shiftwidth')
    set shiftwidth=0 softtabstop=-1
  endif
  set omnifunc=syntaxcomplete#Complete
  set completefunc=syntaxcomplete#Complete
endif


" Section: Folding and Comments

if has('vim_starting')
  if has('folding')
    set foldmethod=marker
    set foldopen+=jump
  endif
  set commentstring=#\ %s
endif

autocmd FileType sh,zsh,csh,tcsh,python,desktop setlocal commentstring=##\ %s
autocmd FileType sql                   setlocal commentstring=--\ %s
autocmd FileType xdefaults             setlocal commentstring=!%s
autocmd FileType git,gitcommit         setlocal foldmethod=syntax foldlevel=1


" Section: Maps

setglobal timeoutlen=1200
setglobal ttimeoutlen=50

inoremap <Esc> <Esc>`^
inoremap <C-[> <Esc>`^
inoremap <C-C> <Esc>`^

noremap Q gq
noremap <silent> <space> :exe "normal i".nr2char(getchar())<CR>

vnoremap . :normal .<CR>
vnoremap > >gv
vnoremap < <gv

vnoremap <leader>ge !gpgw -aser
vnoremap <leader>gs !gpgw -a --clear-sign<CR>
vnoremap <leader>gd !gpgw -d<CR>

nnoremap <leader>r "hyiw:%s/<C-R>h//g<left><left>
nnoremap <leader>s "hyiw/<C-R>h
vnoremap <leader>r "hy:%s/<C-R>h//g<left><left>
vnoremap <leader>s "hy/<C-R>h

function! ReplayLastMacro()
  try
    normal @@
  catch /E748/
    normal @q
  endtry
endfunction
nnoremap <leader>m :call ReplayLastMacro()<CR>
vnoremap <leader>m norm :call ReplayLastMacro()<CR>

cnoremap W!! execute 'silent! write !sudo tee % >/dev/null' <bar> edit!

inoremap <silent> <Up> <Esc><Up>
inoremap <silent> <Down> <Esc><Down>

" Shortcut split navigation
nnoremap <C-h> <C-w>h
nnoremap <C-j> <C-w>j
nnoremap <C-k> <C-w>k
nnoremap <C-l> <C-w>l
nnoremap <C-J> <C-w>w
nnoremap <C-K> <C-w>W

nnoremap <leader>o :setlocal spell!<CR>
nnoremap <leader>cd :cd %:p:h<cr>:pwd<cr>
nnoremap <leader>l :bnext<cr>
nnoremap <leader>h :bprevious<cr>
nnoremap <leader>tn :tabnew<cr>
nnoremap <leader>to :tabonly<cr>
nnoremap <leader>tc :tabclose<cr>
nnoremap <leader>tm :tabmove
nnoremap <leader>t<leader> :tabnext<cr>
" Let 'tl' toggle between this and the last accessed tab.
let g:lasttab = 1
nnoremap <leader>tl :exe "tabnext ".g:lasttab<CR>
autocmd TabLeave * let g:lasttab = tabpagenr()
" Opens a new tab with the current buffer's path.
nnoremap <leader>te :tabedit <C-r>=escape(expand("%:p:h"), " ")<cr>/

nnoremap <silent> <C-w>z :wincmd z<Bar>cclose<Bar>lclose<CR>
nnoremap <silent> <C-w>Q :tabclose<CR>
nnoremap <silent> <C-w>, :if exists(':Wcd')<Bar>exe 'Wcd'<Bar>elseif exists(':Lcd')<Bar>exe 'Lcd'<Bar>elseif exists(':Glcd')<Bar>exe 'Glcd'<Bar>else<Bar>lcd %:h<Bar>endif<CR>
nmap cd <C-w>,

" Paste last thing yanked
nnoremap ,p "0p
nnoremap ,P "0P
" Interaction (cut/copy/paste) from system clibpboard.
vnoremap <S-Del> "+x
vnoremap <C-Insert> "+y
noremap  <script> <S-Insert> "+gP
noremap! <script> <S-Insert> <C-R><C-R>+

nnoremap <Space>r :source $MYVIMRC<Bar>filetype detect<Bar>doau VimEnter<CR>

let s:toggle_hide_all = 0
function! ToggleHideAll()
  if s:toggle_hide_all  == 0
    let s:toggle_hide_all = 1
    set noshowmode
    set noruler
    set laststatus=0
    set showtabline=0
    set noshowcmd
    set signcolumn=no
  else
    let s:toggle_hide_all = 0
    set showmode
    set ruler
    set laststatus=2
    set showtabline=2
    set showcmd
    set signcolumn=auto
  endif
endfunction
nnoremap <leader>H :call ToggleHideAll()<CR>


" Section: Reading and writing files

" Remove trailing whitespace and newline at the end of file before save.
let g:trim_whitespace_exclude_filetype =
  \ ['diff', 'patch', 'mail', 'gitsendemail', 'gitcommit', 'gitrebase']
function! TrimWhitespace()
  if !exists('g:trim_whitespace_exclude_filetype')
    let g:trim_whitespace_exclude_filetype = []
  endif
  for ft in g:trim_whitespace_exclude_filetype
    if &l:filetype ==# ft
      return
    endif
  endfor
  let currPos = getpos(".")
  %s/\s\+$//e
  %s/\n\+\%$//e
  call cursor(currPos[1], currPos[2])
endfunction
autocmd BufWritePre * call TrimWhitespace()

setglobal autoread
setglobal autowrite
if has('multi_byte')
  let &g:fileencodings = substitute(&fileencodings, 'latin1', 'cp1252', '')
endif
setglobal fileformats=unix,dos,mac
setglobal swapfile
setglobal backup

if exists('##CursorHold')
  autocmd CursorHold,BufWritePost,BufReadPost,BufLeave *
        \ if !$VIMSWAP && isdirectory(expand('<amatch>:h')) | let &swapfile = &modified | endif
endif

if has('vim_starting') && exists('+undofile')
  set undofile
endif

if v:version >= 700
  setglobal viminfo=!,'20,<50,s10,h
  if !has('nvim')
    setglobal viminfofile=$XDG_CACHE_HOME/vim/viminfo
  endif
endif

if exists('+undodir') && !has('nvim-0.5')
  let s:cache_home = substitute($XDG_CACHE_HOME, '/$', '', '') . '/vim/'
  let &undodir = s:cache_home . 'undo//'
  let &directory = s:cache_home . 'swap//'
  let &backupdir = s:cache_home . 'backup//'
  let &viewdir = s:cache_home . 'view//'
  if !isdirectory(&undodir) | call mkdir(&undodir, 'p') | endif
  if !isdirectory(&directory) | call mkdir(&directory, 'p') | endif
  if !isdirectory(&backupdir) | call mkdir(&backupdir, 'p') | endif
  if !isdirectory(&viewdir) | call mkdir(&viewdir, 'p') | endif
endif


" Section: Command line editing

setglobal history=1000
setglobal wildmenu
setglobal wildmode=longest:full,full
setglobal wildignore+=tags,.*.un~,*.pyc

cnoremap <C-O>      <Up>
cnoremap <C-R><C-L> <C-R>=substitute(getline('.'), '^\s*', '', '')<CR>

" usage: :call Exec('ls')
" paste from register: "ep
function! Exec(command)
  redir @e
  silent exec a:command
  redir END
endfunction

" Section: External commands

setglobal grepformat=%f:%l:%c:%m,%f:%l:%m,%f:%l%m,%f\ \ %l%m
if executable('rg')
  setglobal grepprg=rg\ -s\ --vimgrep
elseif executable('ag')
  setglobal grepprg=ag\ -s\ --vimgrep
elseif has('unix')
  setglobal grepprg=grep\ -rn\ $*\ /dev/null
endif

" Dirty method to automatically set compiler, as Vim doesn't.
autocmd FileType * try | execute "compiler ".&filetype | catch /./ | endtry

autocmd BufReadPost *
      \ if getline(1) =~# '^#!' |
      \   let b:dispatch =
      \       matchstr(getline(1), '#!\%(/usr/bin/env \+\)\=\zs.*') . ' %:S' |
      \   let b:start = '-wait=always ' . b:dispatch |
      \ endif
autocmd BufReadPost ~/.xbindkeys* let b:dispatch = '-dir=~ pkill -f "xbindkeys -X $DISPLAY"; xbindkeys -X $DISPLAY'
autocmd BufReadPost ~/.Xkbmap let b:dispatch = 'setxkbmap `cat %`'
autocmd BufReadPost {.,}{X,x}{resources,defaults} let b:dispatch = 'xrdb ' . $XRDBOPT . ' -override %'
" autocmd BufWritePost {.,}{X,x}{resources,defaults} silent! !xrdb -override %
autocmd BufReadPost /etc/init.d/* let b:dispatch = 'service %:t restart'
autocmd BufReadPost /etc/init/*.conf let b:dispatch = 'service %:t:r restart'
autocmd BufReadPost /etc/udev/* let b:dispatch = 'service udev restart'
autocmd BufReadPost ~/.config/awesome/*
      \ let b:current_compiler = 'awesome' |
      \ setlocal makeprg=awesome\ -k
      \   efm=%-G%.\ Configuration\ file\ syntax\ OK.,%f:%l:%m,%+G%.%#
autocmd FileType eruby,html,haml command! -buffer -range=% Haml
      \ exe '<line1>,<line2>!html2haml --erb --html-attributes'
      \ (indent(<line1>) ? '|sed -e "s/^/'.matchstr(getline(<line1>), '^\s*').'/"' : '') | setf haml

autocmd FileType vader let b:dispatch = ':Vader'
autocmd FileType tmux let b:dispatch = 'tmux source %:p:S'
autocmd FileType cucumber call extend(b:, {'dispatch': 'cucumber %:S'}, 'keep')
autocmd FileType haskell let b:dispatch = 'ghc %:S'
autocmd FileType java let b:dispatch = 'javac %:S'
autocmd FileType perl let b:dispatch = 'perl -Wc %:S'
autocmd FileType ruby
      \ if !exists('b:start') |
      \   let b:start = executable('pry') ? 'pry -r %:p:S' : 'irb -r %:p:S' |
      \ endif |
      \ if expand('%') =~# '_test\.rb$' |
      \   let b:dispatch = 'testrb %' |
      \ elseif expand('%') =~# '_spec\.rb$' |
      \   let b:dispatch = get(b:, 'dispatch', 'rspec %:s/$/\=exists("l#") ? ":".l# : ""/') |
      \ elseif join(getline(max([line('$')-8,1]), '$'), "\n") =~# '\$0\>' |
      \   let b:dispatch = 'ruby %' |
      \ elseif !exists('b:dispatch') |
      \   let b:dispatch = 'ruby -wc %' |
      \ endif
autocmd FileType tex let b:dispatch = 'latex -interaction=nonstopmode %'
autocmd VimLeave *.tex !texclear %

function! s:open(...) abort
  if executable('xdg-open')
    let cmd = 'xdg-open'
  else
    let cmd = 'open'
  endif
  if !empty(v:servername) && !has('win32')
    let cmd = 'env VISUAL="vim --servername '.v:servername.'" '.cmd
  endif
  let args = a:0 ? copy(a:000) : [get(b:, 'url', '%:p')]
  if type(args[0]) == type(function('tr'))
    let args[0] = call(args[0], [{}], {})
  endif
  call map(args, 'shellescape(expand(v:val))')
  return 'echo ' . string(system(cmd . ' ' . join(args, ' '))[0:-2])
endfunction
command! -nargs=* -complete=file O :exe s:open(<f-args>)


" Section: Filetype settings

" autocmd FileType *
"       \ if !empty(globpath(&rtp, "/autoload/" . &filetype . "complete.vim")) |
"       \   execute "setlocal completefunc=" . &filetype . "complete#Complete" |
"       \ endif
autocmd FileType * setlocal nolinebreak
autocmd FileType gitconfig setlocal shiftwidth=8 tabstop=8 softtabstop=8
autocmd FileType python setlocal textwidth=79 shiftwidth=4 tabstop=4 softtabstop=4 expandtab smarttab autoindent
autocmd FileType sh,zsh,csh,tcsh
      \ setlocal shiftwidth=2 tabstop=2 softtabstop=2 expandtab
autocmd FileType sh,zsh,csh,tcsh,perl,python,ruby,tcl
      \ setlocal formatoptions-=t formatoptions+=roqn |
      \ if !&textwidth | setlocal textwidth=78 | endif
autocmd FileType help
      \ setlocal autoindent formatoptions+=2n formatoptions-=ro
autocmd FileType markdown,text
      \ setlocal textwidth=78 linebreak keywordprg=dict foldlevel=1
autocmd FileType tex setlocal formatoptions+=l
autocmd FileType vim setlocal keywordprg=:help |
      \ if &foldmethod !=# 'diff' | setlocal foldmethod=expr foldlevel=1 |
      \ endif | setlocal foldexpr=getline(v:lnum)=~'^\"\ Section:'?'>1':'='

autocmd BufRead,BufNewFile .{yamllint,salt-lint} setlocal filetype=yaml
autocmd BufRead,BufNewFile .qubesbuilder,/etc/qubes/backup/*.conf
      \ setlocal filetype=yaml
autocmd BufRead,BufNewFile qmemman.conf setlocal filetype=toml
autocmd BufRead,BufNewFile {.,}{X,x}{resources,defaults}
      \ setlocal filetype=xdefaults
autocmd BufRead,BufNewFile *.{ms,me,mom,man} setlocal filetype=groff
autocmd BufRead,BufNewFile *.{ronn,1,2,3,4,5,6,7,8,9}
      \ setlocal nomodeline tabstop=8 textwidth=72 formatoptions+=tln formatoptions-=croq formatlistpat+=\\\|^\\s*[-*+]\\s\\+
autocmd BufRead,BufNewFile *.{automount,mount,path,service,socket,target,timer} setlocal filetype=systemd
autocmd BufRead,BufNewFile *named.conf* setlocal filetype=named
autocmd BufWritePre,FileWritePre **/spell/*.ascii.add :silent mkspell! -ascii %
autocmd BufWritePre,FileWritePre /etc/* if &ft == 'dns' |
      \ exe "normal msHmt" |
      \ exe "gl/^\\s*\\d\\+\\s*;\\s*Serial$/normal ^\<C-A>" |
      \ exe "normal g`tztg`s" |
      \ endif


" Section: Highlighting

if has('spell')
  if has('vim_starting')
    call mkdir($CODE_HOME."/vim/after/spell", 'p', 0700)
    set spell
    set spelllang=en_us
    set spellfile=$CODE_HOME/vim/after/spell/en.utf-8.add
  endif
  let g:spellfile_URL = 'http://ftp.vim.org/vim/runtime/spell'
  autocmd FileType gitcommit,markdown,vimwiki,mail,text setlocal spell
  autocmd FileType help if &buftype ==# 'help' | setlocal nospell | endif
endif

if $TERM !~? 'linux' && &t_Co == 8
  setglobal t_Co=16
endif

if (&t_Co > 2 || has('gui_running')) && has('syntax')
  if !exists('syntax_on') && !exists('syntax_manual')
    exe 'augroup END'
    syntax on
    exe 'augroup my'
  endif
  if has('vim_starting')
    set list
    if !exists('g:colors_name')
      colorscheme vividchalk
    endif
  endif

  autocmd Syntax sh   syn sync minlines=500
  autocmd Syntax css  syn sync minlines=50
  " Fix syntax highlighting
  " autocmd BufEnter * syntax sync fromstart
endif

" Highlight textwdith+1.
let g:tw_hi_till_end = 0
let g:tw_hi_exclude_filetype = [
  \ 'help', 'qrexecpolicy', 'qrexecpolicyservice', 'qrexecconfig'
  \ ]
function! TextwidthHighlight()
  if !exists('g:tw_hi_exclude_filetype')
    let g:tw_hi_exclude_filetype = []
  endif
  if !exists('g:tw_hi_till_end')
    let g:tw_hi_till_end = 0
  endif
  for ft in g:tw_hi_exclude_filetype
    if &filetype ==# ft
      return
    endif
  endfor
  if exists('b:tw_match')
    try | call matchdelete(b:tw_match) | catch | endtry
    unlet b:tw_match
  endif
  if &textwidth == 0 | return | endif
  if g:tw_hi_till_end == 1
    let b:tw_match = matchadd('ColorColumn', '.\{' . (&textwidth+1) . '\}\zs.\+', 100)
  else
    let b:tw_match = matchadd('ColorColumn', '\%' . (&textwidth+1) . 'v', 100)
  endif
endfunction
autocmd BufEnter,BufWritePre,OptionSet,ColorScheme * call TextwidthHighlight()

" Turns off highlighting on the bits of code that are changed, so the line
" that is changed is highlighted but the actual text that has changed stands
" out on the line and is readable.
if &diff
  highlight! link DiffText MatchParen
endif


" Section: Plugin settings

let g:is_posix = 1
let g:sh_fold_enabled = has('folding')
let g:sh_noisk = 1
let g:bash_is_sh = 1
let g:sql_type_default = 'pgsql'
let g:omni_sql_no_default_maps = 1
let g:yaml_recommended_style = 1

let g:update_time_time_format = '%Y %b %d'
let g:prosession_dir = $XDG_DATA_HOME . "/vim/session"
" Only works if not arguments are provided to vim: e.g.: \vim
let g:prosession_on_startup = 1
let g:EditorConfig_exclude_patterns = ['fugitive://.*']
let g:ragtag_global_maps = 1

" vim-markdown-toc deletes text if the file is folded, use manual updates
let g:vmt_auto_update_on_save = 0
let g:vmt_dont_insert_fence = 1

let b:surround_{char2nr('e')} = "\r\n}"
let g:surround_{char2nr('-')} = "<% \r %>"
let g:surround_{char2nr('=')} = "<%= \r %>"
let g:surround_{char2nr('8')} = "/* \r */"
let g:surround_{char2nr('s')} = " \r"
let g:surround_{char2nr('^')} = "/^\r$/"
let g:surround_indent = 1

let g:ctrlp_custom_ignore = {
  \ 'dir':  '\v[\/](\.(git|hg|svn)|\_site)$',
  \ 'file': '\v\.(exe|so|dll|class|png|jpg|jpeg)$',
  \ }

let g:vimwiki_global_ext = 0
let g:vimwiki_list = [{
  \ 'path': '~/src/vimwiki/', 'syntax': 'default', 'ext': 'wiki'
  \ }]

function! s:SetSyntax()
  let g:markdown_folding = 1
  let g:markdown_fenced_languages = []
  let g:markdown_fenced_languages_wanted = [
    \ 'python', 'py=python', 'ruby', 'html', 'javascript', 'css',
    \ 'sh', 'bash=sh', 'systemd', 'vim', 'yaml',
    \ 'sshconfig', 'sshdconfig',
    \ 'qrexecpolicy', 'qrexecpolicyservice', 'qrexecconfig',
    \ ]
  for g:markdown_try in g:markdown_fenced_languages_wanted
    let g:syn_hi_find = g:markdown_try
    if g:markdown_try =~ '\S\+=\S\+'
      let g:syn_hi_find = split(g:markdown_try, '=')[1]
    endif
    if !empty(globpath(&runtimepath, 'syntax/' . g:syn_hi_find . '.vim'))
      call add(g:markdown_fenced_languages, g:markdown_try)
    endif
  endfor
  unlet g:markdown_try g:syn_hi_find

  let g:rst_syntax_code_list = {
    \ 'cpp': ['cpp', 'c++'],
    \ 'java': ['java'],
    \ 'php': ['php'],
    \ 'python': ['python'],
    \ 'perl': ['perl'],
    \ 'rust': ['rust'],
    \ 'sh': ['sh'],
    \ 'vim': ['vim'],
    \ 'yaml': ['yaml'],
    \ 'qrexecpolicy': ['qrexecpolicy'],
    \ 'qrexecpolicyservice': ['qrexecpolicyservice'],
    \ 'qrexecconfig': ['qrexecconfig'],
    \ }
endfunction
" Necessary to apply syntax from plugins.
autocmd FileType markdown,vimwiki,rst call s:SetSyntax()

let g:limelight_conceal_ctermfg='Gray'
function! s:goyo_enter()
  if exists(':Limelight')
    Limelight
  endif
endfunction
function! s:goyo_leave()
  if exists(':Limelight')
    Limelight!
  endif
endfunction
autocmd! User GoyoEnter nested call <SID>goyo_enter()
autocmd! User GoyoLeave nested call <SID>goyo_leave()


" Section: Plugins

call mkdir($XDG_CONFIG_HOME.'/vim/bundle', 'p', 0700)
call mkdir($XDG_CONFIG_HOME.'/vim/after/autoload', 'p', 0700)

runtime autoload/pathogen.vim
if exists('*pathogen#infect')
  execute pathogen#infect('bundle/{}', '~/src/vim/bundle/{}')
  execute pathogen#helptags()
endif

if has('*after_object#enable')
  autocmd VimEnter *
  \ call after_object#enable([']', '['], '=', ':', '-', '#', ' ')
endif


" Section: Misc

setglobal sessionoptions-=buffers sessionoptions-=curdir sessionoptions+=sesdir,globals
" From sensible.vim
" Saving options in session and view files causes more problems than it
" solves, so disable it.
setglobal sessionoptions-=options
setglobal viewoptions-=options
autocmd VimEnter * nested
      \ if !argc() && empty(v:this_session) && filereadable('Session.vim') && !&modified |
      \   source Session.vim |
      \ endif


" Section: End

let $MYVIMRCLOCAL = expand('$HOME/.vimrc.local')
if filereadable($MYVIMRCLOCAL)
  source $MYVIMRCLOCAL
endif

exe 'augroup END'

" vim:set et sw=2 foldmethod=expr
